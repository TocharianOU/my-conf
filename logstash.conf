input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/jdbc_drivers/postgresql-42.7.5.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://tochargis-search:5432/nominatim?socketTimeout=90000"
    jdbc_user => "nominatim"
    jdbc_password => "nominatim"
    
    statement => "
      SELECT 
        p.place_id, 
        p.osm_type, 
        p.osm_id, 
        p.class, 
        p.type, 
        hstore_to_json(p.name)::text as names_json,
        p.admin_level,
        p.housenumber,
        p.postcode,
        p.country_code,
        p.importance,
        p.rank_address,
        p.rank_search,
        p.indexed_date,
        (
          SELECT array_to_json(
            array(
              -- 首先获取原始地址层次数据
              SELECT row_to_json(t) 
              FROM (
                SELECT a.address_place_id, n.osm_id, n.osm_type, a.cached_rank_address as rank,
                  (SELECT json_build_object(
                    'name', COALESCE(n.name->'name', ''),
                    'name:en', COALESCE(n.name->'name:en', ''),
                    'name:my', COALESCE(n.name->'name:my', ''),
                    'name:zh', COALESCE(n.name->'name:zh', '')
                  ))::text as name_json
                FROM place_addressline a 
                JOIN placex n ON n.place_id = a.address_place_id 
                WHERE a.place_id = p.place_id
                  AND n.place_id != p.place_id  -- 排除与POI本身相同的情况
                  AND (
                    n.name->'name' IS NOT NULL OR 
                    n.name->'name:en' IS NOT NULL OR 
                    n.name->'name:my' IS NOT NULL OR 
                    n.name->'name:zh' IS NOT NULL
                  )  -- 确保至少有一个名称不为空
                ORDER BY a.cached_rank_address, a.address_place_id
              ) t
              
              UNION ALL
              
              -- 如果place_addressline为空，则使用空间查询的行政区
              SELECT row_to_json(t)
              FROM (
                SELECT admin.place_id as address_place_id, admin.osm_id, admin.osm_type, admin.rank_address as rank,
                  (SELECT json_build_object(
                    'name', COALESCE(admin.name->'name', ''),
                    'name:en', COALESCE(admin.name->'name:en', ''),
                    'name:my', COALESCE(admin.name->'name:my', ''),
                    'name:zh', COALESCE(admin.name->'name:zh', '')
                  ))::text as name_json
                FROM placex admin
                WHERE (admin.class IN ('boundary', 'place') 
                       AND admin.type IN ('administrative', 'postal_code', 'country', 'state', 'county', 
                                          'city', 'town', 'village', 'hamlet'))
                      AND admin.rank_address < 30
                      AND admin.place_id != p.place_id  -- 排除与POI本身相同的情况
                      AND ST_Contains(admin.geometry, p.centroid)
                      AND (
                        admin.name->'name' IS NOT NULL OR 
                        admin.name->'name:en' IS NOT NULL OR 
                        admin.name->'name:my' IS NOT NULL OR 
                        admin.name->'name:zh' IS NOT NULL
                      )  -- 确保至少有一个名称不为空
                      AND NOT EXISTS (  -- 确保这个行政区不在place_addressline中
                        SELECT 1 FROM place_addressline pa 
                        WHERE pa.place_id = p.place_id AND pa.address_place_id = admin.place_id
                      )
              ) t
              
              UNION ALL
              
              -- 只添加一条最近的highway:residential，且仅当当前POI不是highway residential
              SELECT row_to_json(t)
              FROM (
                SELECT h.place_id as address_place_id, h.osm_id, h.osm_type, h.rank_address as rank,
                  (SELECT json_build_object(
                    'name', COALESCE(h.name->'name', ''),
                    'name:en', COALESCE(h.name->'name:en', ''),
                    'name:my', COALESCE(h.name->'name:my', ''),
                    'name:zh', COALESCE(h.name->'name:zh', '')
                  ))::text as name_json
                FROM placex h
                WHERE h.class = 'highway' AND h.type = 'residential'
                  AND h.place_id != p.place_id  -- 防止自引用
                  AND (
                    h.name->'name' IS NOT NULL OR 
                    h.name->'name:en' IS NOT NULL OR 
                    h.name->'name:my' IS NOT NULL OR 
                    h.name->'name:zh' IS NOT NULL
                  )  -- 确保至少有一个名称不为空
                  AND NOT EXISTS (  -- 确保这个道路不在place_addressline中
                    SELECT 1 FROM place_addressline pa 
                    WHERE pa.place_id = p.place_id AND pa.address_place_id = h.place_id
                  )
                  AND NOT (p.class = 'highway' AND p.type = 'residential')  -- 如果POI本身是道路，则不添加附近道路
                ORDER BY h.geometry <-> p.centroid
                LIMIT 1
              ) t
            )
          )::text
        ) as address_parts_json,
        ST_AsGeoJSON(p.centroid)::text as centroid_json
      FROM 
        placex p
      WHERE 
        (p.housenumber IS NOT NULL OR 
         (p.name IS NOT NULL AND 
          (p.name ? 'name' OR 
           p.name ?| ARRAY['name:ug', 'name:en', 'name:fr', 'name:de', 'name:es', 'name:zh', 'name:ru', 'name:my','name:mm'])))
        AND p.name ? 'name'  -- 确保存在缅甸语名称
      ORDER BY 
        p.place_id ASC
      LIMIT 10000000
    "
    
    jdbc_default_timezone => "UTC"
    jdbc_page_size => 5000
    jdbc_fetch_size => 5000
    jdbc_validate_connection => true
    jdbc_validation_timeout => 3600
    jdbc_pool_timeout => 5
    
    sequel_opts => {
      "max_connections" => 10
    }
  }
}

filter {
  json {
    source => "address_parts_json"
    target => "address_parts"
    remove_field => ["address_parts_json"]
  }
  json {
    source => "names_json"
    target => "names"
    remove_field => ["names_json"]
  }
  json {
    source => "centroid_json"
    target => "centroid"
    remove_field => ["centroid_json"]
  }
  json {
    source => "[address_parts][0][name_json]"
    target => "[address_parts][0][name]"
    remove_field => ["[address_parts][0][name_json]"]
  }
  json {
    source => "[address_parts][1][name_json]"
    target => "[address_parts][1][name]"
    remove_field => ["[address_parts][1][name_json]"]
  }
  json {
    source => "[address_parts][2][name_json]"
    target => "[address_parts][2][name]"
    remove_field => "[address_parts][2][name_json]"
  }
  json {
    source => "[address_parts][3][name_json]"
    target => "[address_parts][3][name]"
    remove_field => "[address_parts][3][name_json]"
  }
  json {
    source => "[address_parts][4][name_json]"
    target => "[address_parts][4][name]"
    remove_field => "[address_parts][4][name_json]"
  }
  json {
    source => "[address_parts][5][name_json]"
    target => "[address_parts][5][name]"
    remove_field => "[address_parts][5][name_json]"
  }
  json {
    source => "[address_parts][6][name_json]"
    target => "[address_parts][6][name]"
    remove_field => "[address_parts][6][name_json]"
  }
  json {
    source => "[address_parts][7][name_json]"
    target => "[address_parts][7][name]"
    remove_field => "[address_parts][7][name_json]"
  }
  json {
    source => "[address_parts][8][name_json]"
    target => "[address_parts][8][name]"
    remove_field => "[address_parts][8][name_json]"
  }
  json {
    source => "[address_parts][9][name_json]"
    target => "[address_parts][9][name]"
    remove_field => "[address_parts][9][name_json]"
  }
  json {
    source => "[address_parts][10][name_json]"
    target => "[address_parts][10][name]"
    remove_field => "[address_parts][10][name_json]"
  }
  json {
    source => "[address_parts][11][name_json]"
    target => "[address_parts][11][name]"
    remove_field => "[address_parts][11][name_json]"
  }
  json {
    source => "[address_parts][12][name_json]"
    target => "[address_parts][12][name]"
    remove_field => "[address_parts][12][name_json]"
  }
  json {
    source => "[address_parts][13][name_json]"
    target => "[address_parts][13][name]"
    remove_field => "[address_parts][13][name_json]"
  }
  json {
    source => "[address_parts][14][name_json]"
    target => "[address_parts][14][name]"
    remove_field => "[address_parts][14][name_json]"
  }
  
  # 添加ruby过滤器来按rank排序address_parts
  ruby {
    code => "
      if event.get('address_parts').is_a?(Array)
        # 获取当前POI的rank_address
        current_rank = event.get('rank_address').to_i
        
        # 过滤掉rank_address大于等于当前POI的rank的地址组件
        filtered_parts = event.get('address_parts').select { |part| 
          part['rank'].to_i < current_rank 
        }
        
        # 按rank降序排序
        sorted_parts = filtered_parts.sort_by { |part| -part['rank'].to_i }
        event.set('address_parts', sorted_parts)
      end
    "
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "address_places"
    document_id => "%{osm_type}%{osm_id}"
    retry_on_conflict => 5
  }
  stdout {
    codec => dots
  }
}
